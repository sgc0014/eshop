{"ast":null,"code":"import { useRef, useEffect } from \"react\";\nexport default function useOuterClick(callback) {\n  const innerRef = useRef();\n  const callbackRef = useRef(); // set current callback in ref, before second useEffect uses it\n\n  useEffect(() => {\n    // useEffect wrapper to be safe for concurrent mode\n    callbackRef.current = callback;\n  });\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n    return () => document.removeEventListener(\"click\", handleClick); // read most recent callback and innerRef dom node from refs\n\n    function handleClick(e) {\n      if (innerRef.current && callbackRef.current && !innerRef.current.contains(e.target)) {\n        callbackRef.current(e);\n      }\n    }\n  }, []); // no need for callback + innerRef dep\n\n  return innerRef; // return ref; client can omit `useRef`\n}","map":{"version":3,"sources":["C:/Users/Dell/Desktop/react/eshop/src/utils/useOuterClick.js"],"names":["useRef","useEffect","useOuterClick","callback","innerRef","callbackRef","current","document","addEventListener","handleClick","removeEventListener","e","contains","target"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA,eAAe,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC5C,QAAMC,QAAQ,GAAGJ,MAAM,EAAvB;AACA,QAAMK,WAAW,GAAGL,MAAM,EAA1B,CAF4C,CAI5C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AAAE;AAChBI,IAAAA,WAAW,CAACC,OAAZ,GAAsBH,QAAtB;AACD,GAFQ,CAAT;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCC,WAAnC;AACA,WAAO,MAAMF,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCD,WAAtC,CAAb,CAFc,CAId;;AACA,aAASA,WAAT,CAAqBE,CAArB,EAAwB;AACtB,UACEP,QAAQ,CAACE,OAAT,IACAD,WAAW,CAACC,OADZ,IAEA,CAACF,QAAQ,CAACE,OAAT,CAAiBM,QAAjB,CAA0BD,CAAC,CAACE,MAA5B,CAHH,EAIE;AACAR,QAAAA,WAAW,CAACC,OAAZ,CAAoBK,CAApB;AACD;AACF;AACF,GAdQ,EAcN,EAdM,CAAT,CAT4C,CAuBpC;;AAER,SAAOP,QAAP,CAzB4C,CAyB3B;AAClB","sourcesContent":["import { useRef, useEffect } from \"react\";\r\n\r\nexport default function useOuterClick(callback) {\r\n    const innerRef = useRef();\r\n    const callbackRef = useRef();\r\n  \r\n    // set current callback in ref, before second useEffect uses it\r\n    useEffect(() => { // useEffect wrapper to be safe for concurrent mode\r\n      callbackRef.current = callback;\r\n    });\r\n  \r\n    useEffect(() => {\r\n      document.addEventListener(\"click\", handleClick);\r\n      return () => document.removeEventListener(\"click\", handleClick);\r\n  \r\n      // read most recent callback and innerRef dom node from refs\r\n      function handleClick(e) {\r\n        if (\r\n          innerRef.current && \r\n          callbackRef.current &&\r\n          !innerRef.current.contains(e.target)\r\n        ) {\r\n          callbackRef.current(e);\r\n        }\r\n      }\r\n    }, []); // no need for callback + innerRef dep\r\n    \r\n    return innerRef; // return ref; client can omit `useRef`\r\n  }"]},"metadata":{},"sourceType":"module"}